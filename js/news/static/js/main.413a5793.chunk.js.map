{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["TextArea","Input","useState","commentList","setCommentList","useEffect","userName","createTime","Date","now","content","children","_onUpdateComment","id","newComment","newList","_findItemAndAdd","_getUser","arr","console","log","i","push","length","className","src","logo","alt","onSend","map","onUpdate","key","CommentItem","isShow","setIsShow","isReply","setIsReply","time","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_renderTime","onClick","style","marginLeft","CommentSend","value","setValue","title","extra","type","onChange","e","target","rows","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"iQAMQA,G,cAAaC,IAAbD,UAUO,aAAO,IAAD,EACmBE,mBAA0B,IAD7C,mBACZC,EADY,KACCC,EADD,KAGnBC,qBAAU,WACRD,EAAe,CACb,CACEE,SAAU,OACVC,WAAYC,KAAKC,MACjBC,QAAS,kDACTC,SAAU,QAGb,IAEH,IAAMC,EAAmB,SAACC,EAAYC,GACpC,IAAIC,EAAO,YAAOZ,GACdU,EAQFG,EAAgBD,EAASF,EAAIC,GAP7BV,EAAe,GAAD,mBAAKW,GAAL,CAAc,CAC1BT,SAAUW,IACRV,WAAYC,KAAKC,MACjBC,QAASI,EACTH,SAAU,QAOZK,EAAkB,SAAlBA,EAAmBE,EAAsBL,EAAYH,GACzDS,QAAQC,IAAIV,GADiE,oBAE/DQ,GAF+D,IAE7E,2BAAmB,CAAC,IAAXG,EAAU,QACjB,GAAGA,EAAEd,aAAeM,EAAI,CACtBQ,EAAEV,SAASW,KAAK,CACdhB,SAAUW,IACVV,WAAYC,KAAKC,MACjBC,UACAC,SAAU,KAEZ,MAECU,EAAEV,SAASY,QACZP,EAAgBK,EAAEV,SAAUE,EAAIH,IAbyC,gCAkBzEO,EAAW,iBAAM,QAEvB,OACE,yBAAKO,UAAU,OAEb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,sDAEF,yBAAKH,UAAU,eACb,uBAAGA,UAAU,cAAb,8DACA,kBAAC,EAAD,CAAaX,GAAI,EAAGe,OAAQhB,KAG9B,yBAAKY,UAAU,YACb,uBAAGA,UAAU,cAAb,iBACErB,GAAe,IAAI0B,KAAI,SAAAR,GAAC,OACxB,kBAAC,EAAD,eAAaS,SAAUlB,EAAkBmB,IAAKV,EAAEd,YAAgBc,UAQpEW,EAAc,SAAdA,EAAe,GAAqE,IAAnE1B,EAAkE,EAAlEA,SAAUC,EAAwD,EAAxDA,WAAYG,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,SAAUmB,EAAyB,EAAzBA,SAAyB,EAC3D5B,oBAAkB,GADyC,mBAChF+B,EADgF,KACxEC,EADwE,OAEzDhC,oBAAkB,GAFuC,mBAEhFiC,EAFgF,KAEvEC,EAFuE,KASvF,OACE,6BACE,uBAAGZ,UAAU,eACVlB,EADH,IAPgB,SAAC+B,GACnB,IAAMC,EAAO,IAAI9B,KAAK6B,GAAQ7B,KAAKC,OACnC,MAAM,GAAN,OAAU6B,EAAKC,cAAf,YAAgCD,EAAKE,WAAa,EAAlD,YAAuDF,EAAKG,UAA5D,YAAyEH,EAAKI,WAA9E,YAA4FJ,EAAKK,aAAjG,YAAiHL,EAAKM,cAMtGC,CAAYtC,GACxB,0BACEiB,UAAU,cACVsB,QAAS,kBAAMZ,GAAWD,KAF5B,IAIKA,EAAS,IAAMtB,EAASY,OAJ7B,KAMA,0BACEC,UAAU,cACVsB,QAAS,kBAAMV,GAAYD,KAF7B,IAIIA,EAAU,SAAW,QAJzB,MAOF,yBAAKX,UAAU,mBAAmBd,GACjCyB,GACC,kBAAC,EAAD,CAAatB,GAAIN,EAAYqB,OAAQ,WACnCE,GAAYA,EAAQ,WAAR,aACZM,GAAYD,MAGfF,GAAW,yBAAKc,MAAO,CAACC,WAAY,MACjCrC,GAAY,IAAIkB,KAAI,SAAAR,GAAC,OACpB,kBAACW,EAAD,eAAaF,SAAUA,EAAUC,IAAKV,EAAEd,YAAgBc,UAO7D4B,EAAc,SAAC,GAAkD,IAAjDpC,EAAgD,EAAhDA,GAAIe,EAA4C,EAA5CA,OAA4C,EAC1C1B,mBAAiB,IADyB,mBAC7DgD,EAD6D,KACtDC,EADsD,KAGpE,OACE,kBAAC,IAAD,CACEC,MAAM,cACNC,MAAO,kBAAC,IAAD,CAAQC,KAAK,UAAUR,QAAS,WAAQlB,GAAUA,EAAOf,EAAIqC,KAA7D,SACP,kBAAClD,EAAD,CACEkD,MAAOA,EACPK,SAAU,SAACC,GAAYL,EAASK,EAAEC,OAAOP,QACzCQ,KAAM,MC/HMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,a,mBEjJ5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.413a5793.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport { Input, Button, Card } from 'antd';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst { TextArea } = Input;\n\ninterface Icomment {\n  userName: string;\n  createTime: number;\n  content: string;\n  children: Array<Icomment>;\n  [props: string]: any;\n}\n\nexport default () => {\n  const [commentList, setCommentList] = useState<Array<Icomment>>([]);\n\n  useEffect(() => {\n    setCommentList([\n      {\n        userName: 'rick',\n        createTime: Date.now(),\n        content: 'I think this is an important question to answer',\n        children: []\n      }\n    ])\n  }, [])\n\n  const _onUpdateComment = (id: number, newComment: string) => {\n    let newList = [...commentList];\n    if(!id) {\n      setCommentList([...newList, { \n        userName: _getUser(), \n          createTime: Date.now(), \n          content: newComment, \n          children: []\n      }])\n    } else {\n      _findItemAndAdd(newList, id, newComment);\n    }\n  }\n\n  const _findItemAndAdd = (arr: Array<Icomment>, id: number, content: string) => {\n    console.log(content)\n    for (let i of arr) {\n      if(i.createTime === id) {\n        i.children.push({\n          userName: _getUser(), \n          createTime: Date.now(), \n          content, \n          children: []\n        })\n        break;\n      }\n      if(i.children.length) {\n        _findItemAndAdd(i.children, id, content)\n      }\n    }\n  }\n\n  const _getUser = () => 'rick'\n\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <span> react hacker news </span>\n      </header>\n      <div className='content-box'>\n        <p className=\"list-title\">The cognitive costs of air pollution (patrickcollison.com)</p>\n        <CommentSend id={0} onSend={_onUpdateComment} />\n      </div>\n\n      <div className='APP-list'>\n        <p className=\"list-title\">comment list</p>\n        {(commentList || []).map(i => (\n          <CommentItem onUpdate={_onUpdateComment} key={i.createTime} {...i} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n\nconst CommentItem = ({ userName, createTime, content, children, onUpdate }: Icomment) => {\n  const [isShow, setIsShow] = useState<boolean>(true);\n  const [isReply, setIsReply] = useState<boolean>(false);\n\n  const _renderTime = (time: number) => {\n    const date = new Date(time || Date.now());\n    return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n  }\n\n  return (\n    <div>\n      <p className=\"App-comment\">\n        {userName} {_renderTime(createTime)}\n        <span \n          className='comment-btn' \n          onClick={() => setIsShow(!isShow)}\n        >\n          [{ isShow ? '-' : children.length}]\n        </span>\n        <span \n          className='comment-btn' \n          onClick={() => setIsReply(!isReply)}\n        >\n          [{isReply ? 'Cancel' : 'Reply'}]\n        </span>\n      </p>\n      <div className='comment-content'>{content}</div>\n      {isReply && (\n        <CommentSend id={createTime} onSend={(...arg: any) => {\n          onUpdate && onUpdate(...arg);\n          setIsReply(!isReply);\n        }} />\n      )}\n      {isShow && (<div style={{marginLeft: 32}}>\n        {(children || []).map(i => \n          (<CommentItem onUpdate={onUpdate} key={i.createTime} {...i} />)\n        )}\n      </div>)}\n    </div>\n  )\n}\n\nconst CommentSend = ({id, onSend}: {id: number, onSend: Function}) => {\n  const [value, setValue] = useState<string>('');\n\n  return (\n    <Card \n      title='add comment' \n      extra={<Button type='primary' onClick={() => { onSend && onSend(id, value) }}>send</Button>}>\n      <TextArea \n        value={value} \n        onChange={(e: any) => {setValue(e.target.value)}} \n        rows={4} />\n    </Card>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}